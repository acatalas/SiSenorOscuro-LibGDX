package com.ale.sisenoroscuro.network;

import android.util.Log;

import com.ale.sisenoroscuro.classes.Group;
import com.ale.sisenoroscuro.classes.GroupDTO;
import com.ale.sisenoroscuro.classes.PlayerDTO;
import com.google.android.gms.tasks.Task;
import com.google.firebase.firestore.DocumentReference;
import com.google.firebase.firestore.DocumentSnapshot;
import com.google.firebase.firestore.EventListener;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.firestore.ListenerRegistration;
import com.google.firebase.firestore.MetadataChanges;
import com.google.firebase.firestore.Query;
import com.google.firebase.firestore.QuerySnapshot;
import com.google.firebase.firestore.WriteBatch;

import com.squareup.okhttp.Callback;
import com.squareup.okhttp.HttpUrl;
import com.squareup.okhttp.OkHttpClient;
import com.squareup.okhttp.Request;
import com.squareup.okhttp.Response;

import java.io.IOException;
import java.util.concurrent.TimeUnit;

public class GroupRepository {

    private final FirebaseHelper firebaseHelper;

    public GroupRepository(FirebaseHelper firebaseHelper){
        this.firebaseHelper = firebaseHelper;
    }

    public Query getGroupsQuery(){
        return firebaseHelper.getDatabase().collection(FirebaseHelper.GROUP_COLLECTION)
                .whereEqualTo("state", "WAITING");
    }

    /**
     * Gets a Firebase Query to show all the players of a group in a RecycleView
     * @param groupId
     * @return
     */
    public Query getPlayersInGroupQuery(String groupId) {
        return firebaseHelper.getDatabase().collection(FirebaseHelper.GROUP_COLLECTION)
                .document(groupId)
                .collection(FirebaseHelper.PLAYER_COLLECTION);
    }

    public Group createGroup(Group group){
        FirebaseFirestore db = firebaseHelper.getDatabase();

        //Start batch writing
        WriteBatch batch = db.batch();

        //Get group id generated by Firebase
        DocumentReference groupReference = db.collection(FirebaseHelper.GROUP_COLLECTION).document();

        //Get player id generated by Firebase
        DocumentReference playerReference =
                db.collection(FirebaseHelper.GROUP_COLLECTION).document(groupReference.getId())
                        .collection(FirebaseHelper.PLAYER_COLLECTION).document();

        //Update the groupId
        group.setId(groupReference.getId());

        //Update the player's ID
        group.getPlayers().get(0).setId(playerReference.getId());

        //Only need name, numPlayers and maxPlayers params
        batch.set(groupReference, new GroupDTO(group.getName(), group.getNumPlayers(), group.getMaxPlayers()));

        //Only need player name to create group
        batch.set(playerReference, new PlayerDTO(group.getPlayers().get(0).getName()));

        batch.commit();

        return group;
    }

    public ListenerRegistration listenGroup(String groupId, EventListener<DocumentSnapshot> listener){
        DocumentReference docRef = firebaseHelper.getDatabase()
                .collection(FirebaseHelper.GROUP_COLLECTION).document(groupId);
        return docRef.addSnapshotListener(MetadataChanges.EXCLUDE, listener);
    }

    /**
     * Gets a QuerySnapshot with information on all the players of a group
     * @param groupId
     * @return
     */
    public Task<QuerySnapshot> getPlayersInGroupTask(String groupId){
        return firebaseHelper.getDatabase().collection(FirebaseHelper.GROUP_COLLECTION)
                .document(groupId).collection(FirebaseHelper.PLAYER_COLLECTION)
                .get();
    }

    private static Request getJoinGroupRequest(String groupRef, String playerName){
        HttpUrl.Builder urlBuilder = HttpUrl.parse("https://us-central1-sisenoroscuro.cloudfunctions.net/webApi/group").newBuilder();
        urlBuilder.addQueryParameter("groupId", groupRef);
        urlBuilder.addQueryParameter("playerName", playerName);
        String url = urlBuilder.build().toString();

        Request request = new Request.Builder()
                .get()
                .url(url)
                .build();
        return request;
    }

    public static void joinGroup(String groupRef, String playerName) {
        OkHttpClient client = new OkHttpClient();
        client.setConnectTimeout(3, TimeUnit.SECONDS);

        Request request = getJoinGroupRequest(groupRef, playerName);


            client.newCall(request).enqueue(new Callback() {
                @Override
                public void onFailure(Request request, IOException e) {
                    Log.e("APP_JOIN_GROUP", e.getMessage());
                }

                @Override
                public void onResponse(Response response) throws IOException {
                    Log.d("APP_JOIN_GROUP", response.message());
                }
            });
    }

    public static void joinGroup(String groupRef, String playerName, Callback callback) {
        OkHttpClient client = new OkHttpClient();
        client.setConnectTimeout(3, TimeUnit.SECONDS);

        Request request = getJoinGroupRequest(groupRef, playerName);

        client.newCall(request).enqueue(callback);
    }

    public static void leaveGroup(String groupRef, String playerId){
        HttpUrl.Builder urlBuilder = HttpUrl.parse("https://us-central1-sisenoroscuro.cloudfunctions.net/webApi/group").newBuilder();
        urlBuilder.addQueryParameter("groupId", groupRef);
        urlBuilder.addQueryParameter("playerId", playerId);
        String url = urlBuilder.build().toString();

        OkHttpClient client = new OkHttpClient();

        Request request = new Request.Builder()
                .delete()
                .url(url)
                .build();

        client.newCall(request).enqueue(new Callback() {
            @Override
            public void onFailure(Request request, IOException e) {
                Log.e("APP_GROUP_LEAVE", e.getMessage(), e);
            }

            @Override
            public void onResponse(Response response) {
                Log.d("APP_GROUP_LEAVE", response.message());
            }
        });

    }

}
